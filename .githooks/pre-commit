#!/usr/bin/env bash

print_message() {
    padding_char=">"
    message=$1
    indent_level="${2:-1}"
    level=${3:-NOCOLOR}
    prepend_newline=${4:-false}
    case "$level" in
    "INFO")
        color='\033[0;32m'
        ;;
    "WARNING")
        color='\033[0;33m'
        ;;
    "ERROR")
        color='\033[0;31m'
        ;;
    *)
        color='\033[0;37m'
        ;;
    esac
    if [[ $prepend_newline == true ]]; then echo ""; fi
    printf "${color}%s %s\n\033[0;37m" $(printf "${padding_char}%.0s" $(seq 1 "$indent_level")) "$message"
}

print_message "pre-commit - running Black formatting" 1 "" true

if ! command -v black &> /dev/null
then
    print_message "ERROR: black could not be found" 2 "ERROR" false
    exit 1
fi

FILES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g' | grep -E "\.py$")
[ -z "$FILES" ] && exit 0
echo "$FILES" | xargs black  --stdin-filename "{}"

print_message "pre-commit - running Autoflake formatting" 1 "" true
echo "$FILES" | xargs autoflake --in-place --remove-unused-variables

print_message "pre-commit - running isort formatting" 1 "" true
echo "$FILES" | xargs isort --overwrite-in-place

echo "$FILES" | xargs git add
